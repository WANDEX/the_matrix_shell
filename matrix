#!/bin/sh
# The Matrix (1999) screen rain effect

BINARY_G='01'
DIGITS_G='0123456789'
LOWER_G='abcdefghijklmnopqrstuvwxyz'
UPPER_G='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
rs="\\\\" # written this way to fix 'shellcheck SC1003'
SPECIAL_G='()[]{}/'"$rs"
KATAKANA_H_G='ｱｲｳｴｵｶｷｸｹｺｻｽｾﾀﾁﾃﾄﾅﾆﾇﾈﾊﾋﾌﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦ'
KATAKANA_F_G='アイウエオカキクケコサスセタチテトナニヌネハヒフホマミムメモヤユヨラリルレロワヲ'

# read into variable using 'Here Document' code block
# -d introduces 'SC3045', but other approaches to write USAGE - are pretty ugly.
read -r -d '' USAGE <<- EOF
Usage: $(basename "$0") [OPTION...]
OPTIONS
    -h, --help          Display help
    -b, --binary        Use binary characters  [$BINARY_G]
    -d, --digits        Use digit characters   [$DIGITS_G]
    -l, --lower         Use lower case letters [$LOWER_G]
    -u, --upper         Use upper case letters [$UPPER_G]
    -s, --special       Use special characters [$SPECIAL_G]
    -t, --testing       Activate character testing mode
    -c, --custom        Use custom characters specified 'inside single quotes'
    -m, --message       Provide a message to display in the center
    -i, --message_int   Provide an integer from 0-9 that modifies the message
    -k, --halfwidth     Use half-width characters of Japanese katakana
                        [$KATAKANA_H_G]
    -K, --fullwidth     Use full-width Japanese katakana characters.
                        Will not work with fixed-width terminals!
[$KATAKANA_F_G]
EXAMPLES
    $(basename "$0") -du
    $(basename "$0") -bi 5 -m 'TEST MESSAGE'
    $(basename "$0") -b --custom='!?/\\\' --testing
EOF

input_validation() {
    # show usage if option not supplied
    err_txt="Provide option which should start with '-(option) or --(longoption)'."
    case "$1" in
        ''|--|-) # empty option
            printf "%s\n" "$err_txt"
            echo "$USAGE"
            exit 1
            ;;
        --*|-*) # assume that such options are the right options
            return
            ;;
        *)
            printf "%s\n" "$err_txt"
            echo "$USAGE"
            exit 1
            ;;
    esac
}

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=bc:dhi:kKlm:stu
    LONG=binary,custom:,digits,help,message_int:,fullwidth,lower,message:,halfwidth,special,testing,upper
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    input_validation "$@"
    # PLACE FOR OPTION DEFAULTS
    message='NEO THE MATRIX HAS YOU'
    message_int=0 # int from 0 to 9 including
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -b|--binary)
            binary_v="$BINARY_G"
            ;;
        -c|--custom)
            shift
            custom_v=$1
            ;;
        -d|--digits)
            digits_v="$DIGITS_G"
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -i|--message_int)
            shift
            message_int="$1"
            ;;
        -k|--halfwidth)
            katakana_h_v="$KATAKANA_H_G"
            ;;
        -K|--fullwidth)
            katakana_f_v="$KATAKANA_F_G"
            ;;
        -l|--lower)
            lower_v="$LOWER_G"
            ;;
        -m|--message)
            shift
            message="$1"
            ;;
        -s|--special)
            special_v="$SPECIAL_G"
            ;;
        -t|--testing)
            testing_f=1
            ;;
        -u|--upper)
            upper_v="$UPPER_G"
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

testing_mode() {
    if [ "$testing_f" ]; then
        printf "Character Testing Mode.\n\n"
        printf "characters:\t[%s]\n" "$letters"
        printf "charlength:\t(%s) = characters length + 1\n" "$letters_len"
        printf "exiting...\n"
        exit 0
    fi
}

get_chars() {
    letters="$binary_v$digits_v$lower_v$upper_v$special_v$katakana_f_v$katakana_h_v$custom_v"
    letters_len="$((${#letters} + 1))"
    testing_mode
}

calc_remainder() {
    num="$1"
    rnum=$(shuf -n 1 -i 1-"$cols")
    out=$(echo "$rnum % $num" | bc)
    echo "$out"
}

main() {
    lines=$(tput lines)
    cols=$(tput cols)
    message_len="$((${#message} - 3))"
    cent_v=$(((lines / 2) + (1))) # find vertical center
    cent_h=$(((cols / 2) - (message_len / 2))) # find horizontal center
    # shellcheck disable=SC2016
    awkscript='
    {
        lines=$1;
        random_col=$3;
        c=$4;
        letter=substr(letters,c,1);
        cols[random_col]=0;
        for (col in cols) {
            rnum = int(30*rand());
            if (cols[col] < 0) {
                line=-cols[col];
                cols[col]=cols[col]-1;
                printf "\033[%s;%sH%s\033[0;0H", line, col, " ";
                if (actcol >= lines) {
                    cols[col]=0;
                } else if (rnum < 1) {
                    cols[col]=0;
                }
            } else {
                line=cols[col]+1;
                cols[col]=cols[col]+1;
                if (rnum < 3) {
                    printf "\033[%s;%sH\033[0;32m%s\033[0m", line, col, letter;
                } else {
                    printf "\033[%s;%sH\033[0;97m%s\033[0m", line+1, col, letter;
                    printf "\033[%s;%sH\033[2;32m%s\033[0m", line, col, letter;
                }
                printf "\033[%s;%sH\033[%s;32m%s\033[0;0H\033[0m", cent_v, cent_h, message_int, message;
                if (cols[col] >= lines) {
                    if (rnum < 2) {
                        cols[col]=0;
                    } else {
                        cols[col]=-1;
                    }
                }
            }
        }
    }
    '
    printf "\e[0;32m"
    clear
    if [ -t 0 ]; then
        stty -echo -icanon -icrnl time 0 min 0;
        tput civis # hide cursor
    fi
    keypress=''
    while [ -z "$keypress" ]; do
        rc=$(calc_remainder "$cols")
        rl=$(calc_remainder "$letters_len")
        echo "$lines $cols $rc $rl"
        sleep 0.04
        keypress="$(cat -v)"
    done | awk \
        -v message="$message" -v message_int="$message_int" \
        -v cent_h="$cent_h" -v cent_v="$cent_v" \
        -v letters="$letters" "$awkscript"
    if [ -t 0 ]; then
        stty sane;
        tput cnorm # restore cursor
    fi
    clear
}

get_opt "$@"
get_chars
main
